// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/notification-service/ent/predicate"
	"github.com/indikay/notification-service/ent/usersetting"
)

// UserSettingUpdate is the builder for updating UserSetting entities.
type UserSettingUpdate struct {
	config
	hooks    []Hook
	mutation *UserSettingMutation
}

// Where appends a list predicates to the UserSettingUpdate builder.
func (usu *UserSettingUpdate) Where(ps ...predicate.UserSetting) *UserSettingUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetUpdatedAt sets the "updated_at" field.
func (usu *UserSettingUpdate) SetUpdatedAt(t time.Time) *UserSettingUpdate {
	usu.mutation.SetUpdatedAt(t)
	return usu
}

// SetUserID sets the "user_id" field.
func (usu *UserSettingUpdate) SetUserID(s string) *UserSettingUpdate {
	usu.mutation.SetUserID(s)
	return usu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableUserID(s *string) *UserSettingUpdate {
	if s != nil {
		usu.SetUserID(*s)
	}
	return usu
}

// SetType sets the "type" field.
func (usu *UserSettingUpdate) SetType(s string) *UserSettingUpdate {
	usu.mutation.SetType(s)
	return usu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableType(s *string) *UserSettingUpdate {
	if s != nil {
		usu.SetType(*s)
	}
	return usu
}

// SetNid sets the "nid" field.
func (usu *UserSettingUpdate) SetNid(s string) *UserSettingUpdate {
	usu.mutation.SetNid(s)
	return usu
}

// SetNillableNid sets the "nid" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableNid(s *string) *UserSettingUpdate {
	if s != nil {
		usu.SetNid(*s)
	}
	return usu
}

// SetEnabled sets the "enabled" field.
func (usu *UserSettingUpdate) SetEnabled(b bool) *UserSettingUpdate {
	usu.mutation.SetEnabled(b)
	return usu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableEnabled(b *bool) *UserSettingUpdate {
	if b != nil {
		usu.SetEnabled(*b)
	}
	return usu
}

// Mutation returns the UserSettingMutation object of the builder.
func (usu *UserSettingUpdate) Mutation() *UserSettingMutation {
	return usu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSettingUpdate) Save(ctx context.Context) (int, error) {
	usu.defaults()
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSettingUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSettingUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usu *UserSettingUpdate) defaults() {
	if _, ok := usu.mutation.UpdatedAt(); !ok {
		v := usersetting.UpdateDefaultUpdatedAt()
		usu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usu *UserSettingUpdate) check() error {
	if v, ok := usu.mutation.UserID(); ok {
		if err := usersetting.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserSetting.user_id": %w`, err)}
		}
	}
	if v, ok := usu.mutation.GetType(); ok {
		if err := usersetting.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "UserSetting.type": %w`, err)}
		}
	}
	if v, ok := usu.mutation.Nid(); ok {
		if err := usersetting.NidValidator(v); err != nil {
			return &ValidationError{Name: "nid", err: fmt.Errorf(`ent: validator failed for field "UserSetting.nid": %w`, err)}
		}
	}
	return nil
}

func (usu *UserSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := usu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersetting.Table, usersetting.Columns, sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeInt))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.UpdatedAt(); ok {
		_spec.SetField(usersetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := usu.mutation.UserID(); ok {
		_spec.SetField(usersetting.FieldUserID, field.TypeString, value)
	}
	if value, ok := usu.mutation.GetType(); ok {
		_spec.SetField(usersetting.FieldType, field.TypeString, value)
	}
	if value, ok := usu.mutation.Nid(); ok {
		_spec.SetField(usersetting.FieldNid, field.TypeString, value)
	}
	if value, ok := usu.mutation.Enabled(); ok {
		_spec.SetField(usersetting.FieldEnabled, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSettingUpdateOne is the builder for updating a single UserSetting entity.
type UserSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSettingMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (usuo *UserSettingUpdateOne) SetUpdatedAt(t time.Time) *UserSettingUpdateOne {
	usuo.mutation.SetUpdatedAt(t)
	return usuo
}

// SetUserID sets the "user_id" field.
func (usuo *UserSettingUpdateOne) SetUserID(s string) *UserSettingUpdateOne {
	usuo.mutation.SetUserID(s)
	return usuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableUserID(s *string) *UserSettingUpdateOne {
	if s != nil {
		usuo.SetUserID(*s)
	}
	return usuo
}

// SetType sets the "type" field.
func (usuo *UserSettingUpdateOne) SetType(s string) *UserSettingUpdateOne {
	usuo.mutation.SetType(s)
	return usuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableType(s *string) *UserSettingUpdateOne {
	if s != nil {
		usuo.SetType(*s)
	}
	return usuo
}

// SetNid sets the "nid" field.
func (usuo *UserSettingUpdateOne) SetNid(s string) *UserSettingUpdateOne {
	usuo.mutation.SetNid(s)
	return usuo
}

// SetNillableNid sets the "nid" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableNid(s *string) *UserSettingUpdateOne {
	if s != nil {
		usuo.SetNid(*s)
	}
	return usuo
}

// SetEnabled sets the "enabled" field.
func (usuo *UserSettingUpdateOne) SetEnabled(b bool) *UserSettingUpdateOne {
	usuo.mutation.SetEnabled(b)
	return usuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableEnabled(b *bool) *UserSettingUpdateOne {
	if b != nil {
		usuo.SetEnabled(*b)
	}
	return usuo
}

// Mutation returns the UserSettingMutation object of the builder.
func (usuo *UserSettingUpdateOne) Mutation() *UserSettingMutation {
	return usuo.mutation
}

// Where appends a list predicates to the UserSettingUpdate builder.
func (usuo *UserSettingUpdateOne) Where(ps ...predicate.UserSetting) *UserSettingUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSettingUpdateOne) Select(field string, fields ...string) *UserSettingUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSetting entity.
func (usuo *UserSettingUpdateOne) Save(ctx context.Context) (*UserSetting, error) {
	usuo.defaults()
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSettingUpdateOne) SaveX(ctx context.Context) *UserSetting {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSettingUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usuo *UserSettingUpdateOne) defaults() {
	if _, ok := usuo.mutation.UpdatedAt(); !ok {
		v := usersetting.UpdateDefaultUpdatedAt()
		usuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usuo *UserSettingUpdateOne) check() error {
	if v, ok := usuo.mutation.UserID(); ok {
		if err := usersetting.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserSetting.user_id": %w`, err)}
		}
	}
	if v, ok := usuo.mutation.GetType(); ok {
		if err := usersetting.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "UserSetting.type": %w`, err)}
		}
	}
	if v, ok := usuo.mutation.Nid(); ok {
		if err := usersetting.NidValidator(v); err != nil {
			return &ValidationError{Name: "nid", err: fmt.Errorf(`ent: validator failed for field "UserSetting.nid": %w`, err)}
		}
	}
	return nil
}

func (usuo *UserSettingUpdateOne) sqlSave(ctx context.Context) (_node *UserSetting, err error) {
	if err := usuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersetting.Table, usersetting.Columns, sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeInt))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersetting.FieldID)
		for _, f := range fields {
			if !usersetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usersetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usersetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := usuo.mutation.UserID(); ok {
		_spec.SetField(usersetting.FieldUserID, field.TypeString, value)
	}
	if value, ok := usuo.mutation.GetType(); ok {
		_spec.SetField(usersetting.FieldType, field.TypeString, value)
	}
	if value, ok := usuo.mutation.Nid(); ok {
		_spec.SetField(usersetting.FieldNid, field.TypeString, value)
	}
	if value, ok := usuo.mutation.Enabled(); ok {
		_spec.SetField(usersetting.FieldEnabled, field.TypeBool, value)
	}
	_node = &UserSetting{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
