// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/notification-service/ent/usersetting"
)

// UserSettingCreate is the builder for creating a UserSetting entity.
type UserSettingCreate struct {
	config
	mutation *UserSettingMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (usc *UserSettingCreate) SetCreatedAt(t time.Time) *UserSettingCreate {
	usc.mutation.SetCreatedAt(t)
	return usc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usc *UserSettingCreate) SetNillableCreatedAt(t *time.Time) *UserSettingCreate {
	if t != nil {
		usc.SetCreatedAt(*t)
	}
	return usc
}

// SetUpdatedAt sets the "updated_at" field.
func (usc *UserSettingCreate) SetUpdatedAt(t time.Time) *UserSettingCreate {
	usc.mutation.SetUpdatedAt(t)
	return usc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (usc *UserSettingCreate) SetNillableUpdatedAt(t *time.Time) *UserSettingCreate {
	if t != nil {
		usc.SetUpdatedAt(*t)
	}
	return usc
}

// SetUserID sets the "user_id" field.
func (usc *UserSettingCreate) SetUserID(s string) *UserSettingCreate {
	usc.mutation.SetUserID(s)
	return usc
}

// SetType sets the "type" field.
func (usc *UserSettingCreate) SetType(s string) *UserSettingCreate {
	usc.mutation.SetType(s)
	return usc
}

// SetNid sets the "nid" field.
func (usc *UserSettingCreate) SetNid(s string) *UserSettingCreate {
	usc.mutation.SetNid(s)
	return usc
}

// SetEnabled sets the "enabled" field.
func (usc *UserSettingCreate) SetEnabled(b bool) *UserSettingCreate {
	usc.mutation.SetEnabled(b)
	return usc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (usc *UserSettingCreate) SetNillableEnabled(b *bool) *UserSettingCreate {
	if b != nil {
		usc.SetEnabled(*b)
	}
	return usc
}

// Mutation returns the UserSettingMutation object of the builder.
func (usc *UserSettingCreate) Mutation() *UserSettingMutation {
	return usc.mutation
}

// Save creates the UserSetting in the database.
func (usc *UserSettingCreate) Save(ctx context.Context) (*UserSetting, error) {
	usc.defaults()
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserSettingCreate) SaveX(ctx context.Context) *UserSetting {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserSettingCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserSettingCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UserSettingCreate) defaults() {
	if _, ok := usc.mutation.CreatedAt(); !ok {
		v := usersetting.DefaultCreatedAt()
		usc.mutation.SetCreatedAt(v)
	}
	if _, ok := usc.mutation.UpdatedAt(); !ok {
		v := usersetting.DefaultUpdatedAt()
		usc.mutation.SetUpdatedAt(v)
	}
	if _, ok := usc.mutation.Enabled(); !ok {
		v := usersetting.DefaultEnabled
		usc.mutation.SetEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserSettingCreate) check() error {
	if _, ok := usc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserSetting.created_at"`)}
	}
	if _, ok := usc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserSetting.updated_at"`)}
	}
	if _, ok := usc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserSetting.user_id"`)}
	}
	if v, ok := usc.mutation.UserID(); ok {
		if err := usersetting.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserSetting.user_id": %w`, err)}
		}
	}
	if _, ok := usc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "UserSetting.type"`)}
	}
	if v, ok := usc.mutation.GetType(); ok {
		if err := usersetting.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "UserSetting.type": %w`, err)}
		}
	}
	if _, ok := usc.mutation.Nid(); !ok {
		return &ValidationError{Name: "nid", err: errors.New(`ent: missing required field "UserSetting.nid"`)}
	}
	if v, ok := usc.mutation.Nid(); ok {
		if err := usersetting.NidValidator(v); err != nil {
			return &ValidationError{Name: "nid", err: fmt.Errorf(`ent: validator failed for field "UserSetting.nid": %w`, err)}
		}
	}
	if _, ok := usc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "UserSetting.enabled"`)}
	}
	return nil
}

func (usc *UserSettingCreate) sqlSave(ctx context.Context) (*UserSetting, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserSettingCreate) createSpec() (*UserSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSetting{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(usersetting.Table, sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeInt))
	)
	if value, ok := usc.mutation.CreatedAt(); ok {
		_spec.SetField(usersetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := usc.mutation.UpdatedAt(); ok {
		_spec.SetField(usersetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := usc.mutation.UserID(); ok {
		_spec.SetField(usersetting.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := usc.mutation.GetType(); ok {
		_spec.SetField(usersetting.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := usc.mutation.Nid(); ok {
		_spec.SetField(usersetting.FieldNid, field.TypeString, value)
		_node.Nid = value
	}
	if value, ok := usc.mutation.Enabled(); ok {
		_spec.SetField(usersetting.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	return _node, _spec
}

// UserSettingCreateBulk is the builder for creating many UserSetting entities in bulk.
type UserSettingCreateBulk struct {
	config
	err      error
	builders []*UserSettingCreate
}

// Save creates the UserSetting entities in the database.
func (uscb *UserSettingCreateBulk) Save(ctx context.Context) ([]*UserSetting, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserSetting, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserSettingCreateBulk) SaveX(ctx context.Context) []*UserSetting {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserSettingCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
