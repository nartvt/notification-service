// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/indikay/notification-service/ent/usersetting"
)

// UserSetting is the model entity for the UserSetting schema.
type UserSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Nid holds the value of the "nid" field.
	Nid string `json:"nid,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled      bool `json:"enabled,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersetting.FieldEnabled:
			values[i] = new(sql.NullBool)
		case usersetting.FieldID:
			values[i] = new(sql.NullInt64)
		case usersetting.FieldUserID, usersetting.FieldType, usersetting.FieldNid:
			values[i] = new(sql.NullString)
		case usersetting.FieldCreatedAt, usersetting.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSetting fields.
func (us *UserSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersetting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			us.ID = int(value.Int64)
		case usersetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				us.CreatedAt = value.Time
			}
		case usersetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				us.UpdatedAt = value.Time
			}
		case usersetting.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				us.UserID = value.String
			}
		case usersetting.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				us.Type = value.String
			}
		case usersetting.FieldNid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nid", values[i])
			} else if value.Valid {
				us.Nid = value.String
			}
		case usersetting.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				us.Enabled = value.Bool
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSetting.
// This includes values selected through modifiers, order, etc.
func (us *UserSetting) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// Update returns a builder for updating this UserSetting.
// Note that you need to call UserSetting.Unwrap() before calling this method if this UserSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSetting) Update() *UserSettingUpdateOne {
	return NewUserSettingClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserSetting) Unwrap() *UserSetting {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSetting is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSetting) String() string {
	var builder strings.Builder
	builder.WriteString("UserSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("created_at=")
	builder.WriteString(us.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(us.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(us.UserID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(us.Type)
	builder.WriteString(", ")
	builder.WriteString("nid=")
	builder.WriteString(us.Nid)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", us.Enabled))
	builder.WriteByte(')')
	return builder.String()
}

// UserSettings is a parsable slice of UserSetting.
type UserSettings []*UserSetting
