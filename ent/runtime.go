// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/indikay/notification-service/ent/notification"
	"github.com/indikay/notification-service/ent/schema"
	"github.com/indikay/notification-service/ent/usersetting"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	notificationFields := schema.Notification{}.Fields()
	_ = notificationFields
	// notificationDescCreatedAt is the schema descriptor for created_at field.
	notificationDescCreatedAt := notificationFields[4].Descriptor()
	// notification.DefaultCreatedAt holds the default value on creation for the created_at field.
	notification.DefaultCreatedAt = notificationDescCreatedAt.Default.(func() time.Time)
	// notificationDescUpdatedAt is the schema descriptor for updated_at field.
	notificationDescUpdatedAt := notificationFields[5].Descriptor()
	// notification.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	notification.DefaultUpdatedAt = notificationDescUpdatedAt.Default.(func() time.Time)
	// notificationDescRead is the schema descriptor for read field.
	notificationDescRead := notificationFields[6].Descriptor()
	// notification.DefaultRead holds the default value on creation for the read field.
	notification.DefaultRead = notificationDescRead.Default.(bool)
	// notificationDescID is the schema descriptor for id field.
	notificationDescID := notificationFields[0].Descriptor()
	// notification.DefaultID holds the default value on creation for the id field.
	notification.DefaultID = notificationDescID.Default.(func() uuid.UUID)
	usersettingMixin := schema.UserSetting{}.Mixin()
	usersettingMixinFields0 := usersettingMixin[0].Fields()
	_ = usersettingMixinFields0
	usersettingFields := schema.UserSetting{}.Fields()
	_ = usersettingFields
	// usersettingDescCreatedAt is the schema descriptor for created_at field.
	usersettingDescCreatedAt := usersettingMixinFields0[0].Descriptor()
	// usersetting.DefaultCreatedAt holds the default value on creation for the created_at field.
	usersetting.DefaultCreatedAt = usersettingDescCreatedAt.Default.(func() time.Time)
	// usersettingDescUpdatedAt is the schema descriptor for updated_at field.
	usersettingDescUpdatedAt := usersettingMixinFields0[1].Descriptor()
	// usersetting.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	usersetting.DefaultUpdatedAt = usersettingDescUpdatedAt.Default.(func() time.Time)
	// usersetting.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	usersetting.UpdateDefaultUpdatedAt = usersettingDescUpdatedAt.UpdateDefault.(func() time.Time)
	// usersettingDescUserID is the schema descriptor for user_id field.
	usersettingDescUserID := usersettingFields[0].Descriptor()
	// usersetting.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	usersetting.UserIDValidator = usersettingDescUserID.Validators[0].(func(string) error)
	// usersettingDescType is the schema descriptor for type field.
	usersettingDescType := usersettingFields[1].Descriptor()
	// usersetting.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	usersetting.TypeValidator = usersettingDescType.Validators[0].(func(string) error)
	// usersettingDescNid is the schema descriptor for nid field.
	usersettingDescNid := usersettingFields[2].Descriptor()
	// usersetting.NidValidator is a validator for the "nid" field. It is called by the builders before save.
	usersetting.NidValidator = usersettingDescNid.Validators[0].(func(string) error)
	// usersettingDescEnabled is the schema descriptor for enabled field.
	usersettingDescEnabled := usersettingFields[3].Descriptor()
	// usersetting.DefaultEnabled holds the default value on creation for the enabled field.
	usersetting.DefaultEnabled = usersettingDescEnabled.Default.(bool)
}
