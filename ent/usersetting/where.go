// Code generated by ent, DO NOT EDIT.

package usersetting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/indikay/notification-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldUserID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldType, v))
}

// Nid applies equality check predicate on the "nid" field. It's identical to NidEQ.
func Nid(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldNid, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldEnabled, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContainsFold(FieldUserID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContainsFold(FieldType, v))
}

// NidEQ applies the EQ predicate on the "nid" field.
func NidEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldNid, v))
}

// NidNEQ applies the NEQ predicate on the "nid" field.
func NidNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldNid, v))
}

// NidIn applies the In predicate on the "nid" field.
func NidIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldNid, vs...))
}

// NidNotIn applies the NotIn predicate on the "nid" field.
func NidNotIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldNid, vs...))
}

// NidGT applies the GT predicate on the "nid" field.
func NidGT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldNid, v))
}

// NidGTE applies the GTE predicate on the "nid" field.
func NidGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldNid, v))
}

// NidLT applies the LT predicate on the "nid" field.
func NidLT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldNid, v))
}

// NidLTE applies the LTE predicate on the "nid" field.
func NidLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldNid, v))
}

// NidContains applies the Contains predicate on the "nid" field.
func NidContains(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContains(FieldNid, v))
}

// NidHasPrefix applies the HasPrefix predicate on the "nid" field.
func NidHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasPrefix(FieldNid, v))
}

// NidHasSuffix applies the HasSuffix predicate on the "nid" field.
func NidHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasSuffix(FieldNid, v))
}

// NidEqualFold applies the EqualFold predicate on the "nid" field.
func NidEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEqualFold(FieldNid, v))
}

// NidContainsFold applies the ContainsFold predicate on the "nid" field.
func NidContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContainsFold(FieldNid, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldEnabled, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSetting) predicate.UserSetting {
	return predicate.UserSetting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSetting) predicate.UserSetting {
	return predicate.UserSetting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSetting) predicate.UserSetting {
	return predicate.UserSetting(sql.NotPredicates(p))
}
