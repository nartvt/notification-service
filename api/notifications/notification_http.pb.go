// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.3
// source: notifications/notification.proto

package notifications

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNotificationGetListUserNotification = "/api.notifications.Notification/GetListUserNotification"
const OperationNotificationGetNotificationSettings = "/api.notifications.Notification/GetNotificationSettings"
const OperationNotificationReadAllNotification = "/api.notifications.Notification/ReadAllNotification"
const OperationNotificationReadNotification = "/api.notifications.Notification/ReadNotification"
const OperationNotificationTelegramActivation = "/api.notifications.Notification/TelegramActivation"

type NotificationHTTPServer interface {
	GetListUserNotification(context.Context, *GetListUserNotificationRequest) (*GetListUserNotificationResponse, error)
	GetNotificationSettings(context.Context, *emptypb.Empty) (*GetNotificationSettingsResponse, error)
	ReadAllNotification(context.Context, *ReadNotificationAllRequest) (*ReadNotificationAllResponse, error)
	ReadNotification(context.Context, *ReadNotificationRequest) (*ReadNotificationResponse, error)
	TelegramActivation(context.Context, *TelegramActivationRequest) (*TelegramActivationResponse, error)
}

func RegisterNotificationHTTPServer(s *http.Server, srv NotificationHTTPServer) {
	r := s.Route("/")
	r.GET("/api/notifications/v1/user_notification", _Notification_GetListUserNotification0_HTTP_Handler(srv))
	r.POST("/api/notifications/v1/read", _Notification_ReadNotification0_HTTP_Handler(srv))
	r.POST("/api/notifications/v1/read_all", _Notification_ReadAllNotification0_HTTP_Handler(srv))
	r.GET("/api/notifications/v1/register/telegram/{token}", _Notification_TelegramActivation0_HTTP_Handler(srv))
	r.GET("/api/notifications/v1/setting", _Notification_GetNotificationSettings0_HTTP_Handler(srv))
}

func _Notification_GetListUserNotification0_HTTP_Handler(srv NotificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetListUserNotificationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationGetListUserNotification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetListUserNotification(ctx, req.(*GetListUserNotificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetListUserNotificationResponse)
		return ctx.Result(200, reply)
	}
}

func _Notification_ReadNotification0_HTTP_Handler(srv NotificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadNotificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationReadNotification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadNotification(ctx, req.(*ReadNotificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadNotificationResponse)
		return ctx.Result(200, reply)
	}
}

func _Notification_ReadAllNotification0_HTTP_Handler(srv NotificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadNotificationAllRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationReadAllNotification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadAllNotification(ctx, req.(*ReadNotificationAllRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadNotificationAllResponse)
		return ctx.Result(200, reply)
	}
}

func _Notification_TelegramActivation0_HTTP_Handler(srv NotificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TelegramActivationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationTelegramActivation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TelegramActivation(ctx, req.(*TelegramActivationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TelegramActivationResponse)
		return ctx.Result(200, reply)
	}
}

func _Notification_GetNotificationSettings0_HTTP_Handler(srv NotificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationGetNotificationSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNotificationSettings(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNotificationSettingsResponse)
		return ctx.Result(200, reply)
	}
}

type NotificationHTTPClient interface {
	GetListUserNotification(ctx context.Context, req *GetListUserNotificationRequest, opts ...http.CallOption) (rsp *GetListUserNotificationResponse, err error)
	GetNotificationSettings(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetNotificationSettingsResponse, err error)
	ReadAllNotification(ctx context.Context, req *ReadNotificationAllRequest, opts ...http.CallOption) (rsp *ReadNotificationAllResponse, err error)
	ReadNotification(ctx context.Context, req *ReadNotificationRequest, opts ...http.CallOption) (rsp *ReadNotificationResponse, err error)
	TelegramActivation(ctx context.Context, req *TelegramActivationRequest, opts ...http.CallOption) (rsp *TelegramActivationResponse, err error)
}

type NotificationHTTPClientImpl struct {
	cc *http.Client
}

func NewNotificationHTTPClient(client *http.Client) NotificationHTTPClient {
	return &NotificationHTTPClientImpl{client}
}

func (c *NotificationHTTPClientImpl) GetListUserNotification(ctx context.Context, in *GetListUserNotificationRequest, opts ...http.CallOption) (*GetListUserNotificationResponse, error) {
	var out GetListUserNotificationResponse
	pattern := "/api/notifications/v1/user_notification"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotificationGetListUserNotification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotificationHTTPClientImpl) GetNotificationSettings(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetNotificationSettingsResponse, error) {
	var out GetNotificationSettingsResponse
	pattern := "/api/notifications/v1/setting"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotificationGetNotificationSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotificationHTTPClientImpl) ReadAllNotification(ctx context.Context, in *ReadNotificationAllRequest, opts ...http.CallOption) (*ReadNotificationAllResponse, error) {
	var out ReadNotificationAllResponse
	pattern := "/api/notifications/v1/read_all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationReadAllNotification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotificationHTTPClientImpl) ReadNotification(ctx context.Context, in *ReadNotificationRequest, opts ...http.CallOption) (*ReadNotificationResponse, error) {
	var out ReadNotificationResponse
	pattern := "/api/notifications/v1/read"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationReadNotification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotificationHTTPClientImpl) TelegramActivation(ctx context.Context, in *TelegramActivationRequest, opts ...http.CallOption) (*TelegramActivationResponse, error) {
	var out TelegramActivationResponse
	pattern := "/api/notifications/v1/register/telegram/{token}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotificationTelegramActivation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
