// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: notifications/notification.proto

package notifications

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Notification_GetListUserNotification_FullMethodName = "/api.notifications.Notification/GetListUserNotification"
	Notification_ReadNotification_FullMethodName        = "/api.notifications.Notification/ReadNotification"
	Notification_ReadAllNotification_FullMethodName     = "/api.notifications.Notification/ReadAllNotification"
	Notification_TelegramActivation_FullMethodName      = "/api.notifications.Notification/TelegramActivation"
	Notification_GetNotificationSettings_FullMethodName = "/api.notifications.Notification/GetNotificationSettings"
)

// NotificationClient is the client API for Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationClient interface {
	GetListUserNotification(ctx context.Context, in *GetListUserNotificationRequest, opts ...grpc.CallOption) (*GetListUserNotificationResponse, error)
	ReadNotification(ctx context.Context, in *ReadNotificationRequest, opts ...grpc.CallOption) (*ReadNotificationResponse, error)
	ReadAllNotification(ctx context.Context, in *ReadNotificationAllRequest, opts ...grpc.CallOption) (*ReadNotificationAllResponse, error)
	TelegramActivation(ctx context.Context, in *TelegramActivationRequest, opts ...grpc.CallOption) (*TelegramActivationResponse, error)
	GetNotificationSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNotificationSettingsResponse, error)
}

type notificationClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationClient(cc grpc.ClientConnInterface) NotificationClient {
	return &notificationClient{cc}
}

func (c *notificationClient) GetListUserNotification(ctx context.Context, in *GetListUserNotificationRequest, opts ...grpc.CallOption) (*GetListUserNotificationResponse, error) {
	out := new(GetListUserNotificationResponse)
	err := c.cc.Invoke(ctx, Notification_GetListUserNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) ReadNotification(ctx context.Context, in *ReadNotificationRequest, opts ...grpc.CallOption) (*ReadNotificationResponse, error) {
	out := new(ReadNotificationResponse)
	err := c.cc.Invoke(ctx, Notification_ReadNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) ReadAllNotification(ctx context.Context, in *ReadNotificationAllRequest, opts ...grpc.CallOption) (*ReadNotificationAllResponse, error) {
	out := new(ReadNotificationAllResponse)
	err := c.cc.Invoke(ctx, Notification_ReadAllNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) TelegramActivation(ctx context.Context, in *TelegramActivationRequest, opts ...grpc.CallOption) (*TelegramActivationResponse, error) {
	out := new(TelegramActivationResponse)
	err := c.cc.Invoke(ctx, Notification_TelegramActivation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) GetNotificationSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNotificationSettingsResponse, error) {
	out := new(GetNotificationSettingsResponse)
	err := c.cc.Invoke(ctx, Notification_GetNotificationSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServer is the server API for Notification service.
// All implementations must embed UnimplementedNotificationServer
// for forward compatibility
type NotificationServer interface {
	GetListUserNotification(context.Context, *GetListUserNotificationRequest) (*GetListUserNotificationResponse, error)
	ReadNotification(context.Context, *ReadNotificationRequest) (*ReadNotificationResponse, error)
	ReadAllNotification(context.Context, *ReadNotificationAllRequest) (*ReadNotificationAllResponse, error)
	TelegramActivation(context.Context, *TelegramActivationRequest) (*TelegramActivationResponse, error)
	GetNotificationSettings(context.Context, *emptypb.Empty) (*GetNotificationSettingsResponse, error)
	mustEmbedUnimplementedNotificationServer()
}

// UnimplementedNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServer struct {
}

func (UnimplementedNotificationServer) GetListUserNotification(context.Context, *GetListUserNotificationRequest) (*GetListUserNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserNotification not implemented")
}
func (UnimplementedNotificationServer) ReadNotification(context.Context, *ReadNotificationRequest) (*ReadNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotification not implemented")
}
func (UnimplementedNotificationServer) ReadAllNotification(context.Context, *ReadNotificationAllRequest) (*ReadNotificationAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllNotification not implemented")
}
func (UnimplementedNotificationServer) TelegramActivation(context.Context, *TelegramActivationRequest) (*TelegramActivationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TelegramActivation not implemented")
}
func (UnimplementedNotificationServer) GetNotificationSettings(context.Context, *emptypb.Empty) (*GetNotificationSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationSettings not implemented")
}
func (UnimplementedNotificationServer) mustEmbedUnimplementedNotificationServer() {}

// UnsafeNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServer will
// result in compilation errors.
type UnsafeNotificationServer interface {
	mustEmbedUnimplementedNotificationServer()
}

func RegisterNotificationServer(s grpc.ServiceRegistrar, srv NotificationServer) {
	s.RegisterService(&Notification_ServiceDesc, srv)
}

func _Notification_GetListUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListUserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).GetListUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_GetListUserNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).GetListUserNotification(ctx, req.(*GetListUserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_ReadNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).ReadNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_ReadNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).ReadNotification(ctx, req.(*ReadNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_ReadAllNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNotificationAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).ReadAllNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_ReadAllNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).ReadAllNotification(ctx, req.(*ReadNotificationAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_TelegramActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).TelegramActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_TelegramActivation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).TelegramActivation(ctx, req.(*TelegramActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_GetNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).GetNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_GetNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).GetNotificationSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Notification_ServiceDesc is the grpc.ServiceDesc for Notification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.notifications.Notification",
	HandlerType: (*NotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListUserNotification",
			Handler:    _Notification_GetListUserNotification_Handler,
		},
		{
			MethodName: "ReadNotification",
			Handler:    _Notification_ReadNotification_Handler,
		},
		{
			MethodName: "ReadAllNotification",
			Handler:    _Notification_ReadAllNotification_Handler,
		},
		{
			MethodName: "TelegramActivation",
			Handler:    _Notification_TelegramActivation_Handler,
		},
		{
			MethodName: "GetNotificationSettings",
			Handler:    _Notification_GetNotificationSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifications/notification.proto",
}
