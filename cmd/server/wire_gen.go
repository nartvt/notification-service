// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2/log"
	"github.com/indikay/go-core/conf"
	"github.com/indikay/go-core/server"
	"github.com/indikay/go-core/service"
	"github.com/indikay/notification-service/internal/biz"
	"github.com/indikay/notification-service/internal/botsvc"
	conf2 "github.com/indikay/notification-service/internal/conf"
	"github.com/indikay/notification-service/internal/data"
	"github.com/indikay/notification-service/internal/extsvc"
	service2 "github.com/indikay/notification-service/internal/service"
	"github.com/indikay/notification-service/internal/worker"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf2.Data, logger log.Logger) (service.Service, func(), error) {
	httpServer := server.NewHTTPServer(confServer, logger)
	grpcServer := server.NewGRPCServer(confServer, logger)
	dataData, cleanup, err := data.NewData(confData)
	if err != nil {
		return nil, nil, err
	}
	userSettingRepo := data.NewUserSettingRepo(dataData)
	validateCodeRepo := data.NewValidateCodeRepo(dataData)
	emailService := extsvc.NewEmailService(confData)
	profileService := extsvc.NewProfileService(confData)
	botService := botsvc.NewTelegramBot(confData, userSettingRepo, validateCodeRepo, emailService, profileService)
	notificationRepo := data.NewNotificationRepo(dataData)
	notificationUseCase := biz.NewNotificationUseCase(notificationRepo, userSettingRepo, validateCodeRepo, profileService)
	notificationService := service2.NewNotificationService(notificationUseCase)
	notificationWorkerService := worker.NewWorkerNotification(confData, notificationService, botService)
	serviceService := initService(httpServer, grpcServer, botService, notificationService, notificationWorkerService)
	return serviceService, func() {
		cleanup()
	}, nil
}
